from datetime import datetime, timedelta, timezone
from typing import Dict

from faststream import FastStream
from faststream.rabbit import RabbitBroker, RabbitQueue, RabbitExchange
from src.domain.events.cat_event import CatCreatedEvent
from src.for_logs.logging_config import setup_logger
from src.infrastructure.rabbit_and_celery.scheduler.scheduler import scheduler
from src.infrastructure.rabbit_and_celery.message_broker.config import rabbitmq_settings

logger = setup_logger()

broker = RabbitBroker(
    url=f"amqp://{rabbitmq_settings.username}:{rabbitmq_settings.password}@{rabbitmq_settings.host}:{rabbitmq_settings.port}/",
)

class Consumer:
    def __init__(self):
        self.app: FastStream = None

    def handle_cat_created_event(event_data: Dict):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –∫–æ—Ç–µ"""
        try:
            cat_name = event_data["name"]
            cat_id = event_data["cat_id"]
            age = event_data["age"]
            color = event_data["color"]
            breed = event_data["breed"]
            breed_id = event_data["breed_id"]
            print(
                f"[Consumer] –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–æ—Ç–∞: '{cat_name}'\n"
                f" ID={cat_id}\n"
                f"age = {age}\n"
                f"color = {color}\n"
                f"breed = {breed}\n"
                f"breed_id = {breed_id}"
            )
        except Exception as e:
            print(f"[Consumer] –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


    # === –û—á–µ—Ä–µ–¥–∏ ===

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
    main_queue = RabbitQueue(
        name=rabbitmq_settings.queue_name,
        durable=True,
        routing_key=rabbitmq_settings.routing_key,
    )

    # –ú–µ—Ä—Ç–≤–∞—è –æ—á–µ—Ä–µ–¥—å (–æ–±—ã—á–Ω–æ –∏–º–µ–Ω—É–µ—Ç—Å—è –∫–∞–∫ dlq.<queue_name>)
    dlq_queue = RabbitQueue(
        name=f"dlq.{rabbitmq_settings.queue_name}",
        durable=True,
    )

    # –û–±–º–µ–Ω (exchange)
    exchange = RabbitExchange(
        name=rabbitmq_settings.exchange_name,
        type="topic",
        durable=True,
    )


    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===


    @broker.subscriber(queue=main_queue, exchange=exchange)
    async def consume_cat_event(message: Dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
        –û–∂–∏–¥–∞–µ—Ç—Å—è JSON —Å event_type = 'cat.created'
        """
        try:
            print("üîç [FastStream] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")

            event_type = message.get("event_type")
            if event_type == "cat.created":
                created_at = message["created_at"]
                if isinstance(created_at, str):
                    if created_at.endswith("Z"):
                        created_at = created_at.replace("Z", "+00:00")
                    created_at = datetime.fromisoformat(created_at)

                cat_event = CatCreatedEvent(
                    cat_id=message["cat_id"],
                    name=message["name"],
                    age=message["age"],
                    breed=message["breed"],
                    breed_id=message["breed_id"],
                    color=message["color"],
                    created_at=created_at,
                )

                job_id = f"cat_created_delay_{cat_event.cat_id}"

                scheduler.add_job(
                    func=Consumer.handle_cat_created_event,
                    trigger="date",
                    run_date=datetime.now(timezone.utc) + timedelta(seconds=2),
                    args=[cat_event.to_dict()],
                    id=job_id,
                    replace_existing=True,
                )

                print(f"[FastStream] –û—Ç–ª–æ–∂–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞: {cat_event.name}")

            else:
                print(f"[FastStream] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")

        except Exception as e:
            print(f"[FastStream] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise


    @broker.subscriber(queue=dlq_queue)
    async def consume_dlq_message(body: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ—Ä—Ç–≤–æ–π –æ—á–µ—Ä–µ–¥–∏.
        –í—ã–≤–æ–¥–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ‚Äî –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞.
        """
        print(f"üíÄ [FastStream DLQ] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ä—Ç–≤–æ–π –æ—á–µ—Ä–µ–¥–∏:\n{body}")

        # –õ–æ–≥–≥–∏—Ä—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        logger.warning(
            logger_class="DLQConsumer",
            event="MessageFromDLQ",
            message="–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–µ—Ä—Ç–≤–æ–π –æ—á–µ—Ä–µ–¥–∏",
            summary="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–ø–∞–ª–æ –≤ DLQ",
            params={"raw_body": body},
        )
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å—å—é–º–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º  consumer...")

    async def stop(self):
        print("consumer stopped")
